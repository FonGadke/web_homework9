{"remainingRequest":"/Users/kirillchulkov/IdeaProjects/wp7/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kirillchulkov/IdeaProjects/wp7/src/components/middle/Animation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kirillchulkov/IdeaProjects/wp7/src/components/middle/Animation.vue","mtime":1545086053398},{"path":"/Users/kirillchulkov/IdeaProjects/wp7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kirillchulkov/IdeaProjects/wp7/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kirillchulkov/IdeaProjects/wp7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kirillchulkov/IdeaProjects/wp7/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    data: function () {\n        var defaultSides = 10;\n        var stats = Array.apply(null, { length: defaultSides })\n            .map(function () { return 100 });\n        return {\n            stats: stats,\n            points: generatePoints(stats),\n            sides: defaultSides,\n            minRadius: 50,\n            interval: null,\n            updateInterval: 500,\n            showFirst: true,\n            showSecond: true\n        }\n    },\n    name: \"Animation\",\n    watch: {\n        sides: function (newSides, oldSides) {\n            var sidesDifference = newSides - oldSides;\n            if (sidesDifference > 0) {\n                for (var i = 1; i <= sidesDifference; i++) {\n                    this.stats.push(this.newRandomValue())\n                }\n            } else {\n                var absoluteSidesDifference = Math.abs(sidesDifference);\n                for (var j = 1; j <= absoluteSidesDifference; j++) {\n                    this.stats.shift()\n                }\n            }\n        },\n        stats: function (newStats) {\n            TweenLite.to(\n                this.$data,\n                this.updateInterval / 1000,\n                { points: generatePoints(newStats) }\n            );\n        },\n        updateInterval: function () {\n            this.resetInterval()\n        }\n    },\n    mounted: function () {\n        this.resetInterval()\n    },\n    methods: {\n        randomizeStats: function () {\n            var vm = this;\n            this.stats = this.stats.map(function () {\n                return vm.newRandomValue()\n            })\n        },\n        newRandomValue: function () {\n            return Math.ceil(this.minRadius + Math.random() * (100 - this.minRadius))\n        },\n        resetInterval: function () {\n            var vm = this;\n            clearInterval(this.interval);\n            this.randomizeStats();\n            this.interval = setInterval(function () {\n                vm.randomizeStats()\n            }, this.updateInterval)\n        }\n    }\n}\nfunction valueToPoint (value, index, total) {\n    var x     = 0;\n    var y     = -value * 0.9;\n    var angle = Math.PI * 2 / total * index;\n    var cos   = Math.cos(angle);\n    var sin   = Math.sin(angle);\n    var tx    = x * cos - y * sin + 100;\n    var ty    = x * sin + y * cos + 100;\n    return { x: tx, y: ty }\n}\n\nfunction generatePoints (stats) {\n    var total = stats.length;\n    return stats.map(function (stat, index) {\n        var point = valueToPoint(stat, index, total);\n        return point.x + ',' + point.y\n    }).join(' ')\n}\n",{"version":3,"sources":["Animation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Animation.vue","sourceRoot":"src/components/middle","sourcesContent":["<template>\n    <div>\n        <button v-on:click=\"showFirst = !showFirst\">\n            Переключить\n        </button>\n        <transition name=\"fade\">\n            <p v-if=\"showFirst\">привет</p>\n        </transition>\n\n        <button @click=\"showSecond = !showSecond\">\n            Переключить отрисовку\n        </button>\n        <transition name=\"slide-fade\">\n            <p v-if=\"showSecond\">привет</p>\n        </transition>\n\n        <div id=\"what\">\n            <svg width=\"200\" height=\"200\">\n                <polygon :points=\"points\"></polygon>\n                <circle cx=\"100\" cy=\"100\" r=\"90\"></circle>\n            </svg>\n            <label>Sides: {{ sides }}</label>\n            <input\n                    type=\"range\"\n                    min=\"3\"\n                    max=\"500\"\n                    v-model.number=\"sides\"\n            >\n            <label>Minimum Radius: {{ minRadius }}%</label>\n            <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"90\"\n                    v-model.number=\"minRadius\"\n            >\n            <label>Update Interval: {{ updateInterval }} milliseconds</label>\n            <input\n                    type=\"range\"\n                    min=\"10\"\n                    max=\"2000\"\n                    v-model.number=\"updateInterval\"\n            >\n        </div>\n\n    </div>\n</template>\n\n<script>\n    export default {\n        data: function () {\n            var defaultSides = 10;\n            var stats = Array.apply(null, { length: defaultSides })\n                .map(function () { return 100 });\n            return {\n                stats: stats,\n                points: generatePoints(stats),\n                sides: defaultSides,\n                minRadius: 50,\n                interval: null,\n                updateInterval: 500,\n                showFirst: true,\n                showSecond: true\n            }\n        },\n        name: \"Animation\",\n        watch: {\n            sides: function (newSides, oldSides) {\n                var sidesDifference = newSides - oldSides;\n                if (sidesDifference > 0) {\n                    for (var i = 1; i <= sidesDifference; i++) {\n                        this.stats.push(this.newRandomValue())\n                    }\n                } else {\n                    var absoluteSidesDifference = Math.abs(sidesDifference);\n                    for (var j = 1; j <= absoluteSidesDifference; j++) {\n                        this.stats.shift()\n                    }\n                }\n            },\n            stats: function (newStats) {\n                TweenLite.to(\n                    this.$data,\n                    this.updateInterval / 1000,\n                    { points: generatePoints(newStats) }\n                );\n            },\n            updateInterval: function () {\n                this.resetInterval()\n            }\n        },\n        mounted: function () {\n            this.resetInterval()\n        },\n        methods: {\n            randomizeStats: function () {\n                var vm = this;\n                this.stats = this.stats.map(function () {\n                    return vm.newRandomValue()\n                })\n            },\n            newRandomValue: function () {\n                return Math.ceil(this.minRadius + Math.random() * (100 - this.minRadius))\n            },\n            resetInterval: function () {\n                var vm = this;\n                clearInterval(this.interval);\n                this.randomizeStats();\n                this.interval = setInterval(function () {\n                    vm.randomizeStats()\n                }, this.updateInterval)\n            }\n        }\n    }\n    function valueToPoint (value, index, total) {\n        var x     = 0;\n        var y     = -value * 0.9;\n        var angle = Math.PI * 2 / total * index;\n        var cos   = Math.cos(angle);\n        var sin   = Math.sin(angle);\n        var tx    = x * cos - y * sin + 100;\n        var ty    = x * sin + y * cos + 100;\n        return { x: tx, y: ty }\n    }\n\n    function generatePoints (stats) {\n        var total = stats.length;\n        return stats.map(function (stat, index) {\n            var point = valueToPoint(stat, index, total);\n            return point.x + ',' + point.y\n        }).join(' ')\n    }\n</script>\n\n<style scoped>\n    .fade-enter-active, .fade-leave-active {\n        transition: opacity 0.5s;\n    }\n    .fade-enter, .fade-leave-to {\n        opacity: 0;\n    }\n\n    .slide-fade-enter-active {\n        transition: all .3s ease;\n    }\n    .slide-fade-leave-active {\n        transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n    }\n    .slide-fade-enter, .slide-fade-leave-to {\n        transform: translateX(15px);\n        opacity: 0;\n    }\n\n    button {\n        display: block;\n    }\n\n    svg { display: block; }\n    polygon { fill: #41B883; }\n    circle {\n        fill: transparent;\n        stroke: #35495E;\n    }\n    input[type=\"range\"] {\n        display: block;\n        width: 100%;\n        margin-bottom: 15px;\n    }\n\n</style>"]}]}